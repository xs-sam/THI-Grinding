// Generated by gencpp from file pc_merge/mergePcRequest.msg
// DO NOT EDIT!


#ifndef PC_MERGE_MESSAGE_MERGEPCREQUEST_H
#define PC_MERGE_MESSAGE_MERGEPCREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pc_merge
{
template <class ContainerAllocator>
struct mergePcRequest_
{
  typedef mergePcRequest_<ContainerAllocator> Type;

  mergePcRequest_()
    : workpiece(0)
    , pcnum(0)
    , saveName()  {
    }
  mergePcRequest_(const ContainerAllocator& _alloc)
    : workpiece(0)
    , pcnum(0)
    , saveName(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _workpiece_type;
  _workpiece_type workpiece;

   typedef int32_t _pcnum_type;
  _pcnum_type pcnum;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _saveName_type;
  _saveName_type saveName;





  typedef boost::shared_ptr< ::pc_merge::mergePcRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pc_merge::mergePcRequest_<ContainerAllocator> const> ConstPtr;

}; // struct mergePcRequest_

typedef ::pc_merge::mergePcRequest_<std::allocator<void> > mergePcRequest;

typedef boost::shared_ptr< ::pc_merge::mergePcRequest > mergePcRequestPtr;
typedef boost::shared_ptr< ::pc_merge::mergePcRequest const> mergePcRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pc_merge::mergePcRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pc_merge::mergePcRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pc_merge::mergePcRequest_<ContainerAllocator1> & lhs, const ::pc_merge::mergePcRequest_<ContainerAllocator2> & rhs)
{
  return lhs.workpiece == rhs.workpiece &&
    lhs.pcnum == rhs.pcnum &&
    lhs.saveName == rhs.saveName;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pc_merge::mergePcRequest_<ContainerAllocator1> & lhs, const ::pc_merge::mergePcRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pc_merge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pc_merge::mergePcRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pc_merge::mergePcRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pc_merge::mergePcRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pc_merge::mergePcRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pc_merge::mergePcRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pc_merge::mergePcRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pc_merge::mergePcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8c18a316570ef41dee51e3304654d20";
  }

  static const char* value(const ::pc_merge::mergePcRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8c18a316570ef41ULL;
  static const uint64_t static_value2 = 0xdee51e3304654d20ULL;
};

template<class ContainerAllocator>
struct DataType< ::pc_merge::mergePcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pc_merge/mergePcRequest";
  }

  static const char* value(const ::pc_merge::mergePcRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pc_merge::mergePcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 workpiece # 0是上半件 1是下右半件 2是下左半件\n"
"int32 pcnum # 需要合成的点云数量 如果为-1 则采用参数文件中的量\n"
"string saveName # 保存的文件名 为空则用参数文件中的值\n"
;
  }

  static const char* value(const ::pc_merge::mergePcRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pc_merge::mergePcRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.workpiece);
      stream.next(m.pcnum);
      stream.next(m.saveName);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mergePcRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pc_merge::mergePcRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pc_merge::mergePcRequest_<ContainerAllocator>& v)
  {
    s << indent << "workpiece: ";
    Printer<int32_t>::stream(s, indent + "  ", v.workpiece);
    s << indent << "pcnum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pcnum);
    s << indent << "saveName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.saveName);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PC_MERGE_MESSAGE_MERGEPCREQUEST_H
