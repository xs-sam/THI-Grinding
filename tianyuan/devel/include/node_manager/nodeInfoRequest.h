// Generated by gencpp from file node_manager/nodeInfoRequest.msg
// DO NOT EDIT!


#ifndef NODE_MANAGER_MESSAGE_NODEINFOREQUEST_H
#define NODE_MANAGER_MESSAGE_NODEINFOREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace node_manager
{
template <class ContainerAllocator>
struct nodeInfoRequest_
{
  typedef nodeInfoRequest_<ContainerAllocator> Type;

  nodeInfoRequest_()
    : nodeType()
    , packName()
    , nodeName()
    , nodeState()  {
    }
  nodeInfoRequest_(const ContainerAllocator& _alloc)
    : nodeType(_alloc)
    , packName(_alloc)
    , nodeName(_alloc)
    , nodeState(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _nodeType_type;
  _nodeType_type nodeType;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _packName_type;
  _packName_type packName;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _nodeName_type;
  _nodeName_type nodeName;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _nodeState_type;
  _nodeState_type nodeState;





  typedef boost::shared_ptr< ::node_manager::nodeInfoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::node_manager::nodeInfoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct nodeInfoRequest_

typedef ::node_manager::nodeInfoRequest_<std::allocator<void> > nodeInfoRequest;

typedef boost::shared_ptr< ::node_manager::nodeInfoRequest > nodeInfoRequestPtr;
typedef boost::shared_ptr< ::node_manager::nodeInfoRequest const> nodeInfoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::node_manager::nodeInfoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::node_manager::nodeInfoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::node_manager::nodeInfoRequest_<ContainerAllocator1> & lhs, const ::node_manager::nodeInfoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.nodeType == rhs.nodeType &&
    lhs.packName == rhs.packName &&
    lhs.nodeName == rhs.nodeName &&
    lhs.nodeState == rhs.nodeState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::node_manager::nodeInfoRequest_<ContainerAllocator1> & lhs, const ::node_manager::nodeInfoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace node_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::node_manager::nodeInfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::node_manager::nodeInfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::node_manager::nodeInfoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::node_manager::nodeInfoRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_manager::nodeInfoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_manager::nodeInfoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::node_manager::nodeInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ebc8bfed655bb2297e6ad26fdcc4dbe6";
  }

  static const char* value(const ::node_manager::nodeInfoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xebc8bfed655bb229ULL;
  static const uint64_t static_value2 = 0x7e6ad26fdcc4dbe6ULL;
};

template<class ContainerAllocator>
struct DataType< ::node_manager::nodeInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "node_manager/nodeInfoRequest";
  }

  static const char* value(const ::node_manager::nodeInfoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::node_manager::nodeInfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string nodeType # launch / node\n"
"string packName # 包名\n"
"string nodeName # .launch名字 / 节点名字\n"
"string nodeState # start / stop\n"
;
  }

  static const char* value(const ::node_manager::nodeInfoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::node_manager::nodeInfoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nodeType);
      stream.next(m.packName);
      stream.next(m.nodeName);
      stream.next(m.nodeState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct nodeInfoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::node_manager::nodeInfoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::node_manager::nodeInfoRequest_<ContainerAllocator>& v)
  {
    s << indent << "nodeType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.nodeType);
    s << indent << "packName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.packName);
    s << indent << "nodeName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.nodeName);
    s << indent << "nodeState: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.nodeState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODE_MANAGER_MESSAGE_NODEINFOREQUEST_H
