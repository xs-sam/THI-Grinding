// Generated by gencpp from file node_manager/nodeInfoResponse.msg
// DO NOT EDIT!


#ifndef NODE_MANAGER_MESSAGE_NODEINFORESPONSE_H
#define NODE_MANAGER_MESSAGE_NODEINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace node_manager
{
template <class ContainerAllocator>
struct nodeInfoResponse_
{
  typedef nodeInfoResponse_<ContainerAllocator> Type;

  nodeInfoResponse_()
    : ok(false)  {
    }
  nodeInfoResponse_(const ContainerAllocator& _alloc)
    : ok(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ok_type;
  _ok_type ok;





  typedef boost::shared_ptr< ::node_manager::nodeInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::node_manager::nodeInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct nodeInfoResponse_

typedef ::node_manager::nodeInfoResponse_<std::allocator<void> > nodeInfoResponse;

typedef boost::shared_ptr< ::node_manager::nodeInfoResponse > nodeInfoResponsePtr;
typedef boost::shared_ptr< ::node_manager::nodeInfoResponse const> nodeInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::node_manager::nodeInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::node_manager::nodeInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::node_manager::nodeInfoResponse_<ContainerAllocator1> & lhs, const ::node_manager::nodeInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ok == rhs.ok;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::node_manager::nodeInfoResponse_<ContainerAllocator1> & lhs, const ::node_manager::nodeInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace node_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::node_manager::nodeInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::node_manager::nodeInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::node_manager::nodeInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::node_manager::nodeInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_manager::nodeInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_manager::nodeInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::node_manager::nodeInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f6da3883749771fac40d6deb24a8c02";
  }

  static const char* value(const ::node_manager::nodeInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f6da3883749771fULL;
  static const uint64_t static_value2 = 0xac40d6deb24a8c02ULL;
};

template<class ContainerAllocator>
struct DataType< ::node_manager::nodeInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "node_manager/nodeInfoResponse";
  }

  static const char* value(const ::node_manager::nodeInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::node_manager::nodeInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ok\n"
"\n"
;
  }

  static const char* value(const ::node_manager::nodeInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::node_manager::nodeInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ok);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct nodeInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::node_manager::nodeInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::node_manager::nodeInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ok);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODE_MANAGER_MESSAGE_NODEINFORESPONSE_H
