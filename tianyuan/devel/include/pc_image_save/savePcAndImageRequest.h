// Generated by gencpp from file pc_image_save/savePcAndImageRequest.msg
// DO NOT EDIT!


#ifndef PC_IMAGE_SAVE_MESSAGE_SAVEPCANDIMAGEREQUEST_H
#define PC_IMAGE_SAVE_MESSAGE_SAVEPCANDIMAGEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pc_image_save
{
template <class ContainerAllocator>
struct savePcAndImageRequest_
{
  typedef savePcAndImageRequest_<ContainerAllocator> Type;

  savePcAndImageRequest_()
    : fileBaseName()
    , PointCloudFileType()  {
    }
  savePcAndImageRequest_(const ContainerAllocator& _alloc)
    : fileBaseName(_alloc)
    , PointCloudFileType(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _fileBaseName_type;
  _fileBaseName_type fileBaseName;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _PointCloudFileType_type;
  _PointCloudFileType_type PointCloudFileType;





  typedef boost::shared_ptr< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct savePcAndImageRequest_

typedef ::pc_image_save::savePcAndImageRequest_<std::allocator<void> > savePcAndImageRequest;

typedef boost::shared_ptr< ::pc_image_save::savePcAndImageRequest > savePcAndImageRequestPtr;
typedef boost::shared_ptr< ::pc_image_save::savePcAndImageRequest const> savePcAndImageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pc_image_save::savePcAndImageRequest_<ContainerAllocator1> & lhs, const ::pc_image_save::savePcAndImageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.fileBaseName == rhs.fileBaseName &&
    lhs.PointCloudFileType == rhs.PointCloudFileType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pc_image_save::savePcAndImageRequest_<ContainerAllocator1> & lhs, const ::pc_image_save::savePcAndImageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pc_image_save

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "30e1c552ee03f9b74de36d8d8acae442";
  }

  static const char* value(const ::pc_image_save::savePcAndImageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x30e1c552ee03f9b7ULL;
  static const uint64_t static_value2 = 0x4de36d8d8acae442ULL;
};

template<class ContainerAllocator>
struct DataType< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pc_image_save/savePcAndImageRequest";
  }

  static const char* value(const ::pc_image_save::savePcAndImageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string fileBaseName\n"
"string PointCloudFileType\n"
;
  }

  static const char* value(const ::pc_image_save::savePcAndImageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fileBaseName);
      stream.next(m.PointCloudFileType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct savePcAndImageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pc_image_save::savePcAndImageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pc_image_save::savePcAndImageRequest_<ContainerAllocator>& v)
  {
    s << indent << "fileBaseName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.fileBaseName);
    s << indent << "PointCloudFileType: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.PointCloudFileType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PC_IMAGE_SAVE_MESSAGE_SAVEPCANDIMAGEREQUEST_H
