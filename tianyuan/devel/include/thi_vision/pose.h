// Generated by gencpp from file thi_vision/pose.msg
// DO NOT EDIT!


#ifndef THI_VISION_MESSAGE_POSE_H
#define THI_VISION_MESSAGE_POSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <thi_vision/position.h>
#include <thi_vision/orientation.h>

namespace thi_vision
{
template <class ContainerAllocator>
struct pose_
{
  typedef pose_<ContainerAllocator> Type;

  pose_()
    : point()
    , angle()  {
    }
  pose_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , angle(_alloc)  {
  (void)_alloc;
    }



   typedef  ::thi_vision::position_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef  ::thi_vision::orientation_<ContainerAllocator>  _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::thi_vision::pose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::thi_vision::pose_<ContainerAllocator> const> ConstPtr;

}; // struct pose_

typedef ::thi_vision::pose_<std::allocator<void> > pose;

typedef boost::shared_ptr< ::thi_vision::pose > posePtr;
typedef boost::shared_ptr< ::thi_vision::pose const> poseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::thi_vision::pose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::thi_vision::pose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::thi_vision::pose_<ContainerAllocator1> & lhs, const ::thi_vision::pose_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::thi_vision::pose_<ContainerAllocator1> & lhs, const ::thi_vision::pose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace thi_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::thi_vision::pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::thi_vision::pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thi_vision::pose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thi_vision::pose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thi_vision::pose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thi_vision::pose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::thi_vision::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5c3a4fd40f2693c968403414ea57b4f";
  }

  static const char* value(const ::thi_vision::pose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5c3a4fd40f2693cULL;
  static const uint64_t static_value2 = 0x968403414ea57b4fULL;
};

template<class ContainerAllocator>
struct DataType< ::thi_vision::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "thi_vision/pose";
  }

  static const char* value(const ::thi_vision::pose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::thi_vision::pose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "position point\n"
"orientation angle\n"
"\n"
"================================================================================\n"
"MSG: thi_vision/position\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"================================================================================\n"
"MSG: thi_vision/orientation\n"
"float32 a\n"
"float32 b\n"
"float32 c\n"
;
  }

  static const char* value(const ::thi_vision::pose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::thi_vision::pose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::thi_vision::pose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::thi_vision::pose_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::thi_vision::position_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "angle: ";
    s << std::endl;
    Printer< ::thi_vision::orientation_<ContainerAllocator> >::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THI_VISION_MESSAGE_POSE_H
