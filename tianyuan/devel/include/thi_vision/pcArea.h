// Generated by gencpp from file thi_vision/pcArea.msg
// DO NOT EDIT!


#ifndef THI_VISION_MESSAGE_PCAREA_H
#define THI_VISION_MESSAGE_PCAREA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <thi_vision/position.h>

namespace thi_vision
{
template <class ContainerAllocator>
struct pcArea_
{
  typedef pcArea_<ContainerAllocator> Type;

  pcArea_()
    : listPcPoint()  {
    }
  pcArea_(const ContainerAllocator& _alloc)
    : listPcPoint(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::thi_vision::position_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::thi_vision::position_<ContainerAllocator> >> _listPcPoint_type;
  _listPcPoint_type listPcPoint;





  typedef boost::shared_ptr< ::thi_vision::pcArea_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::thi_vision::pcArea_<ContainerAllocator> const> ConstPtr;

}; // struct pcArea_

typedef ::thi_vision::pcArea_<std::allocator<void> > pcArea;

typedef boost::shared_ptr< ::thi_vision::pcArea > pcAreaPtr;
typedef boost::shared_ptr< ::thi_vision::pcArea const> pcAreaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::thi_vision::pcArea_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::thi_vision::pcArea_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::thi_vision::pcArea_<ContainerAllocator1> & lhs, const ::thi_vision::pcArea_<ContainerAllocator2> & rhs)
{
  return lhs.listPcPoint == rhs.listPcPoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::thi_vision::pcArea_<ContainerAllocator1> & lhs, const ::thi_vision::pcArea_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace thi_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::thi_vision::pcArea_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::thi_vision::pcArea_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thi_vision::pcArea_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thi_vision::pcArea_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thi_vision::pcArea_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thi_vision::pcArea_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::thi_vision::pcArea_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1910f595f1099a0b020344db77cf9645";
  }

  static const char* value(const ::thi_vision::pcArea_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1910f595f1099a0bULL;
  static const uint64_t static_value2 = 0x020344db77cf9645ULL;
};

template<class ContainerAllocator>
struct DataType< ::thi_vision::pcArea_<ContainerAllocator> >
{
  static const char* value()
  {
    return "thi_vision/pcArea";
  }

  static const char* value(const ::thi_vision::pcArea_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::thi_vision::pcArea_<ContainerAllocator> >
{
  static const char* value()
  {
    return "position[] listPcPoint\n"
"\n"
"================================================================================\n"
"MSG: thi_vision/position\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::thi_vision::pcArea_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::thi_vision::pcArea_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.listPcPoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pcArea_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::thi_vision::pcArea_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::thi_vision::pcArea_<ContainerAllocator>& v)
  {
    s << indent << "listPcPoint[]" << std::endl;
    for (size_t i = 0; i < v.listPcPoint.size(); ++i)
    {
      s << indent << "  listPcPoint[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::thi_vision::position_<ContainerAllocator> >::stream(s, indent + "    ", v.listPcPoint[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // THI_VISION_MESSAGE_PCAREA_H
