// Generated by gencpp from file thi_vision/visionTracksResponse.msg
// DO NOT EDIT!


#ifndef THI_VISION_MESSAGE_VISIONTRACKSRESPONSE_H
#define THI_VISION_MESSAGE_VISIONTRACKSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <thi_vision/track.h>

namespace thi_vision
{
template <class ContainerAllocator>
struct visionTracksResponse_
{
  typedef visionTracksResponse_<ContainerAllocator> Type;

  visionTracksResponse_()
    : tracks()
    , ok(false)  {
    }
  visionTracksResponse_(const ContainerAllocator& _alloc)
    : tracks(_alloc)
    , ok(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::thi_vision::track_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::thi_vision::track_<ContainerAllocator> >> _tracks_type;
  _tracks_type tracks;

   typedef uint8_t _ok_type;
  _ok_type ok;





  typedef boost::shared_ptr< ::thi_vision::visionTracksResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::thi_vision::visionTracksResponse_<ContainerAllocator> const> ConstPtr;

}; // struct visionTracksResponse_

typedef ::thi_vision::visionTracksResponse_<std::allocator<void> > visionTracksResponse;

typedef boost::shared_ptr< ::thi_vision::visionTracksResponse > visionTracksResponsePtr;
typedef boost::shared_ptr< ::thi_vision::visionTracksResponse const> visionTracksResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::thi_vision::visionTracksResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::thi_vision::visionTracksResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::thi_vision::visionTracksResponse_<ContainerAllocator1> & lhs, const ::thi_vision::visionTracksResponse_<ContainerAllocator2> & rhs)
{
  return lhs.tracks == rhs.tracks &&
    lhs.ok == rhs.ok;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::thi_vision::visionTracksResponse_<ContainerAllocator1> & lhs, const ::thi_vision::visionTracksResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace thi_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::thi_vision::visionTracksResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::thi_vision::visionTracksResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thi_vision::visionTracksResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::thi_vision::visionTracksResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thi_vision::visionTracksResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::thi_vision::visionTracksResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::thi_vision::visionTracksResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a33069b7a2e523cfca40ce4212d31d16";
  }

  static const char* value(const ::thi_vision::visionTracksResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa33069b7a2e523cfULL;
  static const uint64_t static_value2 = 0xca40ce4212d31d16ULL;
};

template<class ContainerAllocator>
struct DataType< ::thi_vision::visionTracksResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "thi_vision/visionTracksResponse";
  }

  static const char* value(const ::thi_vision::visionTracksResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::thi_vision::visionTracksResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "track[] tracks\n"
"bool ok\n"
"\n"
"\n"
"================================================================================\n"
"MSG: thi_vision/track\n"
"pose[] track\n"
"\n"
"================================================================================\n"
"MSG: thi_vision/pose\n"
"position point\n"
"orientation angle\n"
"\n"
"================================================================================\n"
"MSG: thi_vision/position\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"================================================================================\n"
"MSG: thi_vision/orientation\n"
"float32 a\n"
"float32 b\n"
"float32 c\n"
;
  }

  static const char* value(const ::thi_vision::visionTracksResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::thi_vision::visionTracksResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tracks);
      stream.next(m.ok);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct visionTracksResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::thi_vision::visionTracksResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::thi_vision::visionTracksResponse_<ContainerAllocator>& v)
  {
    s << indent << "tracks[]" << std::endl;
    for (size_t i = 0; i < v.tracks.size(); ++i)
    {
      s << indent << "  tracks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::thi_vision::track_<ContainerAllocator> >::stream(s, indent + "    ", v.tracks[i]);
    }
    s << indent << "ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ok);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THI_VISION_MESSAGE_VISIONTRACKSRESPONSE_H
